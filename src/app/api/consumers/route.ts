import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import bcrypt from 'bcryptjs'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

// Create client with anon key
const supabase = createClient(supabaseUrl, supabaseAnonKey)

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const {
      email,
      password,
      full_name,
      phone,
      address,
      registered_voter
    } = body

    // Validate required fields
    if (!full_name || !email || !password) {
      return NextResponse.json(
        { error: 'Missing required fields: full_name, email, password' },
        { status: 400 }
      )
    }

    console.log('üöÄ Creating consumer account only...', { full_name })

    // Step 1: Hash the password before saving
    const saltRounds = 12
    const hashedPassword = await bcrypt.hash(password, saltRounds)
    console.log('‚úÖ Password hashed successfully')

    // Step 2: Create account record in accounts table first
    const accountData = {
      email,
      password: hashedPassword,
      full_name,
      full_address: address || null,
      mobile_no: phone || null,
      user_type: 'consumer'
    }

    const { data: accountData_result, error: accountError } = await supabase
      .from('accounts')
      .insert(accountData)
      .select()
      .single()

    if (accountError) {
      console.error('‚ùå Account record creation failed:', accountError)
      return NextResponse.json(
        { error: `Failed to create account record: ${accountError.message}` },
        { status: 500 }
      )
    }

    console.log('‚úÖ Account record created:', accountData_result.id)

    // Step 3: Create consumer record in consumers table
    // water_meter_no will be auto-generated by the database default
    const consumerData = {
      consumer_id: accountData_result.id, // Foreign key to accounts table
      registered_voter: registered_voter === 'yes' || registered_voter === true
    }

    const { data: consumerData_result, error: consumerError } = await supabase
      .from('consumers')
      .insert(consumerData)
      .select()
      .single()

    if (consumerError) {
      console.error('‚ùå Consumer record creation failed:', consumerError)
      return NextResponse.json(
        { error: `Account created but consumer record failed: ${consumerError.message}` },
        { status: 500 }
      )
    }

    console.log('‚úÖ Consumer record created:', consumerData_result.id)

    // Consumer creation complete - no meter readings or billing records created
    // These will be created later when meter readings are taken

    return NextResponse.json({
      success: true,
      message: 'Consumer account created successfully',
      data: {
        consumer: consumerData_result,
        account: accountData_result
      }
    })

  } catch (error) {
    console.error('üí• Unexpected error creating consumer records:', error)
    return NextResponse.json(
      { error: 'An unexpected error occurred' },
      { status: 500 }
    )
  }
}
